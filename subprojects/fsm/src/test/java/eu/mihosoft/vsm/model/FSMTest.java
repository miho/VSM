/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eu.mihosoft.vsm.model;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Objects;
import java.util.stream.Collectors;

public class FSMTest {
    @Test public void testATMFSM() throws InterruptedException {
        State idleState = State.newBuilder().withName("idle").withOnEntryAction(
                (s,e) -> {
                    System.out.println("Machine Idle State");
                }).build();

        State cardInserted = State.newBuilder().withName("cardInserted")
                .withOnEntryAction((s,e) -> {
                    System.out.println("Card Inserted State");
                }).build();

        State pinEnteredState = State.newBuilder().withName("pinEntered")
                .withOnEntryAction((s,e) -> {
                    System.out.println("Pin Entered State");
                }).build();

        State amountRequested = State.newBuilder().withName("amountRequested")
                .withOnEntryAction((s,e) -> {
                    System.out.println("Amount Requested State");
                }).build();

        Transition insertCardTransition = Transition.newBuilder().withTrigger("insert-card")
                .withGuard((t, evt)->{
                    if(evt.getArgs().isEmpty()) return false;
                    return Objects.equals("DE6594339437", evt.getArgs().get(0));
                })
                .withActions((s,e) -> {
                    System.out.println("-> correct card inserted");
                }).withSource(idleState).withTarget(cardInserted).build();

        Transition enterPinTransition = Transition.newBuilder().withTrigger("enter-pin")
                .withGuard((t,evt) -> {
                    System.out.println("-> pin entered");
                    System.out.println("-> checking...");

                    try {
                        Thread.sleep(2500);
                    } catch (InterruptedException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }

                    if(evt.getArgs().isEmpty()) {
                        return false;
                    }

                    return Objects.equals(1234, evt.getArgs().get(0));
                }).withActions((s,e) -> {
                    System.out.println("-> valid.");
                }).withSource(cardInserted).withTarget(pinEnteredState).build();

        Transition requestAmountTransition = Transition.newBuilder().withTrigger("request-amount")
                .withActions((s,e) -> {
                    System.out.println("-> amount-requested");
                }).withSource(pinEnteredState).withTarget(amountRequested).build();

        Transition moneyDispatchedTransition = Transition.newBuilder().withTrigger("dispatch-money")
                .withActions((s,e) -> {
                    System.out.println("-> checking whether requested amount is available");
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        // TODO Auto-generated catch block
                        ex.printStackTrace();
                    }
                    System.out.println("-> money-dispatched");
                })
                .withSource(amountRequested)
                .withTarget(idleState)
                .build();

        State errorState = State.newBuilder()
                .withName("Error")
                .withOnEntryAction((state, event)->{
                    System.out.println("ERROR: ");
                })
                .build();

        FSM fsm = FSM.newBuilder()
                .withName("ATM")
                .withOwnedState(
                        idleState, cardInserted, pinEnteredState, amountRequested,errorState
                )
                .withInitialState(idleState)
                .withErrorState(errorState)
                .withTransitions(
                        insertCardTransition,
                        enterPinTransition,
                        requestAmountTransition,
                        moneyDispatchedTransition
                )
                .withVerbose(true)
                .build();

        var visitedStates = Collections.synchronizedList(new ArrayList<State>());

        fsm.vmf().reflect().propertyByName("currentState").orElseThrow().addChangeListener(change->{
            var oldV = (State)change.propertyChange().orElseThrow().oldValue();
            var newV = (State)change.propertyChange().orElseThrow().newValue();
            System.out.println("> transitioned from " + (oldV==null?"<undefined>":oldV.getName()) + " to " + newV.getName());
            if(newV!=null) {
                visitedStates.add(newV);
            }
        });

        fsm.startAsync();

        Thread.sleep(1500);
        
        fsm.trigger("insert-card", "DE6594339437");

        Thread.sleep(500);

        fsm.trigger("enter-pin", 1234);

        Thread.sleep(500);

        fsm.trigger("request-amount", 350);

        fsm.trigger("dispatch-money", 350);

        Thread.sleep(4000);

        fsm.stop();

        System.out.println("> Visited States: "
                +visitedStates.stream().map(s->s.getName()).
                collect(Collectors.joining(", "))
        );

        assertThat(visitedStates, contains(
                idleState,
                cardInserted,
                pinEnteredState,
                amountRequested,
                idleState
                )
        );



    }
}
